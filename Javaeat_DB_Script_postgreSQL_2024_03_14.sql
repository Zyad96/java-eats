CREATE TABLE IF NOT EXISTS "user" (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL UNIQUE,
  password VARCHAR(255) NOT NULL,
  user_type_id INTEGER NOT NULL,
  phone VARCHAR(255) NOT NULL,
  status VARCHAR(255) NOT NULL DEFAULT 'active',
  created_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS role (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  created_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP  
);

CREATE TABLE IF NOT EXISTS user_role (
  id SERIAL PRIMARY KEY,
  user_id INTEGER NOT NULL,
  role_id INTEGER NOT NULL,
  created_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP  ,
  UNIQUE (user_id, role_id)
);

CREATE TABLE IF NOT EXISTS user_type (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  created_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP  
);

CREATE TABLE IF NOT EXISTS customer (
  id SERIAL PRIMARY KEY,
  user_id INTEGER NOT NULL,
  created_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP  
);

CREATE TABLE IF NOT EXISTS address (
  id SERIAL PRIMARY KEY,
  customer_id INTEGER NOT NULL,
  address_line1 VARCHAR(255) NOT NULL,
  address_line2 VARCHAR(255),
  city VARCHAR(255) NOT NULL,
  street VARCHAR(255),
  country VARCHAR(255) NOT NULL DEFAULT 'EGYPT',
  created_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP  
);

CREATE TABLE IF NOT EXISTS restaurant (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  status VARCHAR(255) NOT NULL DEFAULT 'open',
  created_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP  ,
  UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS restaurant_details (
  id SERIAL PRIMARY KEY,
  restaurant_id INTEGER NOT NULL,
  description TEXT NOT NULL,
  created_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP  
);

CREATE TABLE IF NOT EXISTS menu (
  id SERIAL PRIMARY KEY,
  restaurant_id INTEGER NOT NULL,
  name VARCHAR(255) NOT NULL,
  status VARCHAR(255) NOT NULL DEFAULT 'active',
  created_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP  ,
  UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS menu_item (
  id SERIAL PRIMARY KEY,
  menu_id INTEGER NOT NULL,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  price NUMERIC NOT NULL,
  status VARCHAR(255) NOT NULL DEFAULT 'available',
  created_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP  ,
  UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS ingredient (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  allergens TEXT,
  unit VARCHAR(255),
  cost NUMERIC,
  stock_quantity INTEGER NOT NULL,
  storage_instructions TEXT,
  created_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP  ,
  UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS menu_item_ingredient (
  id SERIAL PRIMARY KEY,
  menu_item_id INTEGER NOT NULL,
  ingredient_id INTEGER NOT NULL,
  created_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP  ,
  UNIQUE (menu_item_id, ingredient_id)
);

CREATE TABLE IF NOT EXISTS cart (
  id SERIAL PRIMARY KEY,
  customer_id INTEGER NOT NULL,
  subtotal NUMERIC NOT NULL,
  tax NUMERIC NOT NULL,
  total NUMERIC NOT NULL,
  status VARCHAR(255) NOT NULL DEFAULT 'active',
  created_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP  ,
  UNIQUE (customer_id, status)
);

CREATE TABLE IF NOT EXISTS cart_item (
  id SERIAL PRIMARY KEY,
  cart_id INTEGER NOT NULL,
  menu_item_id INTEGER NOT NULL,
  quantity INTEGER NOT NULL,
  price NUMERIC NOT NULL,
  created_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP  
);

CREATE TABLE IF NOT EXISTS "order" (
  id SERIAL PRIMARY KEY,
  customer_id INTEGER NOT NULL,
  order_date TIMESTAMP NOT NULL,
  subtotal NUMERIC NOT NULL,
  tax NUMERIC NOT NULL,
  total NUMERIC NOT NULL,
  order_status_id INTEGER NOT NULL,
  created_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP  
);

CREATE TABLE IF NOT EXISTS order_item (
  id SERIAL PRIMARY KEY,
  order_id INTEGER NOT NULL,
  menu_item_id INTEGER NOT NULL,
  quantity INTEGER NOT NULL,
  price NUMERIC NOT NULL,
  status VARCHAR(255) NOT NULL DEFAULT 'pending',
  created_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP  ,
  UNIQUE (order_id, menu_item_id)
);

CREATE TABLE IF NOT EXISTS order_status (
  id SERIAL PRIMARY KEY,
  status VARCHAR(255) NOT NULL,
  created_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP  
);

CREATE TABLE IF NOT EXISTS order_tracking (
  id SERIAL PRIMARY KEY,
  order_id INTEGER NOT NULL,
  current_location VARCHAR(255) NOT NULL,
  estimated_delivery_time TIMESTAMP NOT NULL,
  created_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP  
);

CREATE TABLE IF NOT EXISTS payment_integration_type (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  created_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP  
);

CREATE TABLE IF NOT EXISTS payment_type_configuration (
  id SERIAL PRIMARY KEY,
  payment_integration_type_id INTEGER NOT NULL,
  configuration_details TEXT NOT NULL,
  created_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP  
);

CREATE TABLE IF NOT EXISTS preferred_payment_setting (
  id SERIAL PRIMARY KEY,
  customer_id INTEGER NOT NULL,
  payment_type_config_id INTEGER NOT NULL,
  created_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP  
);

CREATE TABLE IF NOT EXISTS "transaction" (
  id SERIAL PRIMARY KEY,
  order_id INTEGER NOT NULL,
  amount NUMERIC NOT NULL,
  transaction_status_id INTEGER NOT NULL,
  created_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP  
);

CREATE TABLE IF NOT EXISTS transaction_details (
  id SERIAL PRIMARY KEY,
  transaction_id INTEGER NOT NULL,
  details TEXT NOT NULL,
  created_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP  
);

CREATE TABLE IF NOT EXISTS transaction_status (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  created_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP  
);

CREATE TABLE IF NOT EXISTS auditing (
  id SERIAL NOT NULL PRIMARY KEY,
  "user_id" INTEGER NOT NULL,
  action VARCHAR(255) NOT NULL,
  details JSONB NOT NULL,
  "timestamp" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

ALTER TABLE "user" ADD FOREIGN KEY (user_type_id) REFERENCES user_type(id);
ALTER TABLE user_role ADD FOREIGN KEY (user_id) REFERENCES "user"(id);
ALTER TABLE user_role ADD FOREIGN KEY (role_id) REFERENCES role(id);
ALTER TABLE customer ADD FOREIGN KEY (user_id) REFERENCES "user"(id);
ALTER TABLE address ADD FOREIGN KEY (customer_id) REFERENCES customer(id);
ALTER TABLE restaurant_details ADD FOREIGN KEY (restaurant_id) REFERENCES restaurant(id);
ALTER TABLE menu ADD FOREIGN KEY (restaurant_id) REFERENCES restaurant(id);
ALTER TABLE menu_item ADD FOREIGN KEY (menu_id) REFERENCES menu(id);
ALTER TABLE menu_item_ingredient ADD FOREIGN KEY (menu_item_id) REFERENCES menu_item(id);
ALTER TABLE menu_item_ingredient ADD FOREIGN KEY (ingredient_id) REFERENCES ingredient(id);
ALTER TABLE cart ADD FOREIGN KEY (customer_id) REFERENCES customer(id);
ALTER TABLE cart_item ADD FOREIGN KEY (cart_id) REFERENCES cart(id);
ALTER TABLE cart_item ADD FOREIGN KEY (menu_item_id) REFERENCES menu_item(id);
ALTER TABLE "order" ADD FOREIGN KEY (customer_id) REFERENCES customer(id);
ALTER TABLE "order" ADD FOREIGN KEY (order_status_id) REFERENCES order_status(id);
ALTER TABLE order_item ADD FOREIGN KEY (order_id) REFERENCES "order"(id);
ALTER TABLE order_item ADD FOREIGN KEY (menu_item_id) REFERENCES menu_item(id);
ALTER TABLE order_tracking ADD FOREIGN KEY (order_id) REFERENCES "order"(id);
ALTER TABLE payment_type_configuration ADD FOREIGN KEY (payment_integration_type_id) REFERENCES payment_integration_type(id);
ALTER TABLE preferred_payment_setting ADD FOREIGN KEY (customer_id) REFERENCES customer(id);
ALTER TABLE preferred_payment_setting ADD FOREIGN KEY (payment_type_config_id) REFERENCES payment_type_configuration(id);
ALTER TABLE "transaction" ADD FOREIGN KEY (order_id) REFERENCES "order"(id);
ALTER TABLE "transaction" ADD FOREIGN KEY (transaction_status_id) REFERENCES transaction_status(id);
ALTER TABLE transaction_details ADD FOREIGN KEY (transaction_id) REFERENCES "transaction"(id);
ALTER TABLE auditing ADD FOREIGN KEY ("user_id") REFERENCES "user"(id);
